---
services:
  frontend_tui:
    build:
      network: host
      context: .
      additional_contexts:
        cmd_app: ./cmd/app
      dockerfile: ./cmd/app/Dockerfile
    environment:
      - CHAT_CONNECT_ADDR=0.0.0.0:8080
    networks:
      - public
    depends_on:
      - backend


  backend:
    build:
      network: host
      context: .
      additional_contexts:
        cmd_server: ./cmd/server
      dockerfile: ./cmd/server/Dockerfile
    env_file: ./cmd/secrets/var.dev
    environment:
      - PG_HOST=postgres
      - PG_DATABASE=postgres
      - PG_USER=postgres
      - PG_PORT=5432
      - PG_SSLMODE=verify-ca
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - APP_ADDR=0.0.0.0:8080
    networks:
      - public
      - private
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  redis:
    image: redis:7.4.2-alpine3.21
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 2s
      retries: 10
    networks:
      - private

  postgres:
    image: postgres:17.4-alpine3.21
    restart: always
    user: postgres
    environment:
      # POSTGRES_DB: postgres
      POSTGRES_PASSWORD: /run/secrets/pg_password
    secrets:
      - pg_password
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - private
      
secrets:
  pg_password:
    file: ./cmd/secrets/pg_password.txt
    
networks:
  public:
  private:
